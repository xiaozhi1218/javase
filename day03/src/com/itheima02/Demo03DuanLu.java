package com.itheima02;
/*
    逻辑运算符的短路效果
        1.短路的逻辑运算符
            (1)短路逻辑与&&: 左侧为false,右边不计算
            (2)短路逻辑或||: 左侧为true,右侧不计算
        2.特点:
            (1)短路逻辑与&&: 和&结果是相同的,但是&&可以提高效率
            (2)短路逻辑与||: 和|结果是相同的,但是||可以提高效率

        3.建议:
            以后开发学习中,全部使用短路与&& 以及 短路或||
 */
public class Demo03DuanLu {
    public static void main(String[] args) {
        int a = 2;
        /*
            整个表达式(3>5)&&(++a>2)从左向右计算
            先计算表达式3>5结果为false
            因为两个表达式使用&&连接,左侧为false,已经决定了最终的结果为false,
            不管右侧表达式(++a>2)的结果是true还是false,都无法改变&&的最终结果,
            所以右侧表达式(++a>2)不进行计算
         */
        System.out.println((3>5)&&(++a>2));//false
        System.out.println(a);//2: 说明++a没有计算,&&右侧的表达式没有执行

        int b = 2;
        /*
            整个表达式(3>5)&(++b>2)从左向右计算
            先计算表达式3>5结果为false
            因为两个表达式使用&连接,左侧为false,虽然已经决定了最终的结果为false,
            但是右侧表达式(++b>2)仍然要进行计算,所以b的值最终是3
         */
        System.out.println((3>5)&(++b>2));//false
        System.out.println(b);//3: 说明++b进行计算,&右侧的表达式执行了

        System.out.println("-------------------");
        int c = 2;
        /*
            整个表达式(3<5)||(++c>2)从左向右计算
            先计算表达式3<5结果为true
            因为两个表达式使用||连接,左侧为true,已经决定了最终的结果为true,
            不管右侧表达式(++c>2)的结果是true还是false,都无法改变||的最终结果,
            所以右侧表达式(++c>2)不进行计算
         */
        System.out.println((3<5)||(++c>2));//true
        System.out.println(c);//2: 说明++c没有计算,||右侧的表达式没有执行

        int d = 2;
        /*
            整个表达式(3<5)|(++d>2)从左向右计算
            先计算表达式3<5结果为true
            因为两个表达式使用|连接,左侧为true,虽然已经决定了最终的结果为true,
            但是右侧表达式(++d>2)仍然要进行计算,所以d的值最终是3
         */
        System.out.println((3<5)|(++d>2));//true
        System.out.println(d);//3: 说明++d进行计算,|右侧的表达式执行了
    }
}
